// in: struct {
//   input: the same input received by propuestasolucion
//   solution: the solution reconstructed by propuestasolucion
// }
// out: struct {
//   valid: int
//   msg: string
// }
main {
     valid = 0;
     //check that the solution has the correct format
     n = input.n;
     if(solution.board.size!=n){
       msg="The solution only has "+solution.size+" rows, but it should have n ("+n+").";
       stop;
     }
     for(i=0;i<n;i++){
       if(solution.board[i].size!=n){
	 msg="The "+i+" row only has "+solution.board[i].size+" columns, but it should hae n ("+n+").";
	 stop;
       }
     }
     for(i=0;i<n;i++){
       for(j=0;j<n;j++){
	 if(solution.board[i][j]!=0 and solution.board[i][j]!=1){
	   msg="The cell ("+i+","+j+") contains a "+solution.board[i][j]+", but it should contain either 1 or 0.";
	   stop;
	 }
       }
     }
     //check rows
     for(i=0;i<n;i++){
       queens=0;
       for(j=0;j<n;j++){
	 if(solution.board[i][j]==1)queens++;
       }
       if(queens>1){
	 msg="There are "+queens+" queens in the row "+i+".";
	 stop;
       }
     }
     //check cols
     for(i=0;i<n;i++){
       queens=0;
       for(j=0;j<n;j++){
	 if(solution.board[j][i]==1)queens++;
       }
       if(queens>1){
	 msg="There are "+queens+" queens in the column "+i+".";
	 stop;
       }
     }
     //check diagonals \
     for(i=-n;i<n;i++){
       queens=0;
       for(j=0;j<n;j++){
	 if(i+j>=0 and i+j<n){
	   if(solution.board[i+j][j]==1)queens++;
	 }
       }
       if(queens>1){
	 msg="There are "+queens+" queens in a '\' diagonal.";
	 stop;
       }
     }
     //check diagonals /
     for(i=-n;i<n;i++){
       queens=0;
       for(j=0;j<n;j++){
	 if(i+j>=0 and i+j<n){
	   if(solution.board[i+j][n-1-j]==1)queens++;
	 }
       }
       if(queens>1){
	 msg="There are "+queens+" queens in a '/' diagonal.";
	 stop;
       }
     }
     //check n queens
     queens=0;
     for(i=0;i<n;i++){
       for(j=0;j<n;j++){
	 if(solution.board[i][j]==1)queens++;
       }
     }
     if(queens != n){
       msg="There are "+queens+" queens in the board, but there should be n ("+n+").";
       stop;
     }
     valid=1;
     msg="And it is correct.";
}
