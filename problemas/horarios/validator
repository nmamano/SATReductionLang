// in: struct {
//   input: the same input received by propuestasolucion
//   solution: the solution reconstructed by propuestasolucion
// }
// out: struct {
//   valid: int
//   english: string
//   spanish: string
//   catalan: string
// }
main {
  out.valid = 0;
  out.catalan = "Només disponible en anglès";
  out.spanish = "Sólo disponible en inglés";

  nSubjs = in.input.subjects.size;
  nClassrooms = in.input.classrooms;
  nHours=60;
  nDays=5;
  nTeachers=in.input.teachers.size;
  nCourses=in.input.courses;

  sol&=in.solution;
  if(sol.size<nSubjs){
    out.english="The solution only has length "+sol.size+", but there are "+nSubjs+" subjects.";
    stop;
  }
  for(i=0;i<nSubjs;i++){
    if(sol[i].classroom<0 or sol[i].classroom>=nClassrooms) {
      out.english="The subject "+i+" has assigned the classroom "+sol[i].classroom+", which is not a valid classroom identifier. It should be a number between 0 and in.classrooms-1 ("+(nClassrooms-1)+").";
      stop;
    }
    if(sol[i].teacher<0 or sol[i].teacher>=nTeachers){
      out.english="The subject "+i+" has assigned the teacher "+sol[i].teacher+", which is not a valid teacher identifier. It should be a number between 0 and in.teachers.size-1 ("+(nTeachers-1)+").";
      stop;
    }
    for(j=0;j<sol[i].hours.size;j++){
      if(sol[i].hours[j]<0 or sol[i].hours[j]>=nHours){
	out.english="The "+j+" hour assigned to the subject "+i+" is "+sol[i].hours[j]+", which is not a valid hour. It should be a number between 0 and "+(nHours-1)+".";
	stop;
      }
    }
  }
  for(i=0;i<nSubjs;i++){
    if(sol[i].hours.size!=in.input.subjects[i].hours){
      out.english="The subject "+i+" has been assigned "+sol[i].hours.size+" hours, but it should have "+in.input.subjects[i].hours+" hours assigned.";
      stop;
    }
  }
  //subjects have suitable classrooms
  for(i=0;i<nSubjs;i++){
    found=0;
    for(j=0;j<in.input.subjects[i].classrooms.size;j++){
      if(in.input.subjects[i].classrooms[j]==sol[i].classroom)found=1;
    }
    if(found==0){
      out.english="The subject "+i+" has assigned the classroom "+sol[i].classroom+", which is not amongst the allowed classrooms for this subject";
      stop;
    }
  }
  //subjects have suitable teachers
  for(i=0;i<nSubjs;i++){
    found=0;
    for(j=0;j<in.input.subjects[i].teachers.size;j++){
      if(in.input.subjects[i].teachers[j]==sol[i].teacher)found=1;
    }
    if(found==0){
      out.english="The subject "+i+" has assigned the teacher "+sol[i].teacher+", which is not amongst the compatible teachers for this subject";
      stop;
    }
  }
  //no two sessions of the same subject in the same day
  for(i=0;i<nSubjs;i++){
    for(j=0;j<sol[i].hours.size;j++){
      for(k=j+1;k<sol[i].hours.size;k++){
	if(sol[i].hours[j]/12 ==sol[i].hours[k]/12){
	  out.english="The subject "+i+" has 2 sessions in the day "+j/12+". Namely, hours "+j+" and "+k+".";
	  stop;
	}
      }
    }
  }
  //no teacher in forbidden hours
  for(i=0;i<nSubjs;i++){
    for(j=0;j<sol[i].hours.size;j++){
      for(k=0;k<in.input.teachers[sol[i].teacher].size;k++){
	if(sol[i].hours[j]==in.input.teachers[sol[i].teacher][k]){
	  out.english="The subject "+i+" has a session at the hour "+sol[i].hours[j]+", but this hour is forbidden for the teacher "+sol[i].teacher+", who gives this subject";
	  stop;
	}
      }
    }
  }
  //no 2 subject at the same room and hour
  for(i=0;i<nClassrooms;i++){
    for(j=0;j<nHours;j++){
      count=0;
      for(k=0;k<nSubjs;k++){
	if(sol[k].classroom==i){
	  for(t=0;t<sol[k].hours.size;t++){
	    if(sol[k].hours[t]==j)count++;
	  }
	}
      }
      if(count>1){
	out.english="There are "+count+" sessions scheduled at the classroom "+i+" and hour "+j+". There should be at most 1.";
	stop;
      }
    }
  }
  //no 2 subjects at the same time with the same teacher
  for(i=0;i<nTeachers;i++){
    for(j=0;j<nHours;j++){
      count=0;
      for(k=0;k<nSubjs;k++){
	if(sol[k].teacher==i){
	  for(t=0;t<sol[k].hours.size;t++){
	    if(sol[k].hours[t]==j)count++;
	  }
	}
      }
      if(count>1){
	out.english="There are "+count+" sessions given by the teacher "+i+" at the hour "+j+". There should be at most 1.";
	stop;
      }
    }
  }
  //sessions of the same subject canot overlap
  for(i=0;i<nSubjs;i++){
    for(j=0;j<sol[i].hours.size;j++){
      for(k=j+1;k<sol[i].hours.size;k++){
	if(sol[i].hours[j]==sol[i].hours[k]){
	  out.english="The subject "+i+" has two sessions in the hour "+sol[i].hours[j]+".";
	  stop;
	}
      }
    }
  }
  //sessions of the same course cannot overlap
  for(i=0;i<nCourses;i++){
    for(j=0;j<nSubjs;j++){
      if(in.input.subjects[j].course==i){
	for(k=0;k<sol[j].hours.size;k++){
	  for(j2=j+1;j2<nSubjs;j2++){
	    if(in.input.subjects[j2].course==i){
	      for(k2=0;k2<sol[j2].hours.size;k2++){
		if(sol[j].hours[k]==sol[j2].hours[k2]){
		  out.english="The subject "+j+" and the subject "+j2+" have sessions on the hour "+sol[j].hours[k]+", and they belong to the same course "+i+".";
		  stop;
		}
	      }
	    }
	  }
	}
      }
    }
  }
  //compact schedule for each course, max 6 hours/cuourse/day
  for(i=0;i<nDays;i++){
    for(j=0;j<nCourses;j++){
      minh=13;
      maxh=-1;
      count=0;
      for(k=0;k<nSubjs;k++){
	if(in.input.subjects[k].course==j){
	  for(t=0;t<sol[k].hours.size;t++){
	    H=sol[k].hours[t];
	    if(H/12==i){
	      if(H%12 < minh)minh=H%12;
	      if(H%12 > maxh)maxh=H%12;
	      count++;
	    }
	  }
	}
      }
      if(count>6){
	out.english="There are "+count+" sessions of subjects of the course "+j+" in the day "+i+". There should be at most 6.";
	stop;
      }
      if(count != 0 and maxh-minh+1 != count){
	out.english="The schedule for the course "+j+" in the day "+i+" is not compact; it consists of "+count+" sessions, the first of which starts at the hour "+minh+" of that day and the last of which starts at the hour "+maxh+" of that day.";
	stop;
      }
    }
  }

  out.valid=1;
  out.english="And it is correct.";
  out.spanish="Y es correcta.";
  out.catalan="I es correcta.";
}
