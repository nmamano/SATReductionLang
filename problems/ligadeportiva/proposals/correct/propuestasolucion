reduction
{
  //day{i}team{j}team{k}
  //day{i}team{j}

  for(day=0;day<n-1;day++){
    for(team=0;team<n;team++){
      for(team2=0;team2<n;team2++){
       "d{day}t{team}t{team2}" iff "d{day}t{team2}t{team}";
       "d{day}t{team}t{team2}" implies ("d{day}t{team}" iff not "d{day}t{team2}");
      }
    }
  }
  //every team plays every day
  for(day=0;day<n-1;day++){
    for(team=0;team<n;team++){
      exactly 1 {
        for(team2=0;team2<n;team2++){
          if(team!=team2){
            "d{day}t{team}t{team2}";
          }
        }
      };
    }
  }
  //every team plays every other team
  for(team=0;team<n;team++){
    for(team2=team+1;team2<n;team2++){
      exactly 1 {
        for(day=0;day<n-1;day++){
          "d{day}t{team}t{team2}";
        }
      };
    }
  }
  //num matches away
  for(team=0;team<n;team++){
    atleast n/2-1 {
      for day in 0..n-2 not "d{day}t{team}";
    };
    atmost n/2 {
      for day in 0..n-2 not "d{day}t{team}";
    };
  }
  //no tripititions
  for(team=0;team<n;team++){
    for(day=0;day<n-1-2;day++){
      "d{day}t{team}" or "d{day+1}t{team}" or "d{day+2}t{team}";
      not "d{day}t{team}" or not "d{day+1}t{team}" or not "d{day+2}t{team}";
    }
  }
  //no unavailable stadiums
  v&=unavailable_stadiums;
  for(i=0;i<v.size;i++){
    team=v[i][0];
    day=v[i][1];
    not "d{day}t{team}";
  }
  //no shared stadiums both home
  v&=shared_stadiums;
  for(i=0;i<v.size;i++){
    team=v[i][0];
    team2=v[i][1];
    for(day=0;day<n-1;day++){
      not "d{day}t{team}" or not "d{day}t{team2}";
    }
  }   
}

reconstruction
{
  for(day=0;day<n-1;day++){
    for(team=0;team<n;team++){
      if(model["d{day}t{team}"])matches[day][team].visitant=0;
      else matches[day][team].visitant=1;
      for(team2=0;team2<n;team2++){
  if(model["d{day}t{team}t{team2}"])matches[day][team].opponent=team2;
      }
    }
  } 
}