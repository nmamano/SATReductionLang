reduction
{
  // concurrence limits for tasks, furnaces, and refrigerators
  for(a=0 ; a<h ; ++a){
    atmost 3{
      for i,t in tasks "conc{i}at{a}";
    };
    atmost 2{
      for i,t in tasks "furn{i}at{a}";
    };
    atmost 1{
      for i,t in tasks "refr{i}at{a}";
    };
  }
  // each task must start at some point, and then occupies one task (the whole
  // time), one furnace (some time), and one refrigerator (last 5 hours)
  for i,t in tasks {
    exactly 1{
    for(a=0 ; a<=h-(1+t+5) ; ++a)
      "start{i}at{a}";
    };
    for(a=0 ; a<=h-(1+t+5) ; ++a){
      "start{i}at{a}" implies and {
        for(j=0 ; j<1+t+5 ; ++j)"conc{i}at{a+j}";
      };
      "start{i}at{a}" implies and {
        for(j=0 ; j<1+t+5 ; ++j)if (j>0 and j<=t)"furn{i}at{a+j}";
      };
      "start{i}at{a}" implies and {
        for(j=0 ; j<1+t+5 ; ++j)if (j>t)"refr{i}at{a+j}";
      };
    }
  }
}