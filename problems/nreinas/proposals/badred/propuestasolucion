reduction
{
  // one queen per column and row
  for i in 0..n - 1 {
  exactly 1 {
    for j in 0..n - 1 {
      "row{i}col{j}";
      }
    };
    exactly 1 {
      for j in 0..n - 1 {
      "row{j}col{i}";
      }
    };
  }
  // one queen per diagonal / and one per diagonal \
  for direction in 0..1, i in 0..n + n - 2 {
    x = min(i, n - 1);
    y = max(0, i - (n - 1));
    if (direction) {
      r = n - 1 - y;
      c = x;
      xd = -1;
      yd = -1;
    } else{
      r = x;
      c = y;
      xd = -1;
      yd = 1;
    }
    exactly 1 {
      for (j = 0 ; j < n ; ++j) {
        x = r + xd * j;
        y = c + yd * j;
        if (x >= 0 and x<n and y >= 0 and y < n)
          "row{x}col{y}";
      }      
    };
  }
}

reconstruction
{
  for i in 0..n - 1, j in 0..n - 1
  board[i][j] = model["row{i}col{j}"];
}
