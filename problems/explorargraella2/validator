// in: struct {
//   input: the same input received by propuestasolucion
//   solution: the solution reconstructed by propuestasolucion
// }
// out: struct {
//   valid: int
//   english: string
// }
main {
     valid = 0;
     
     inp &= input;
     sol &= solution.path;
     n = inp.n;
     grid&=inp.grid;
     k = sol.size;
     m=inp.k;
     tps&=inp.teleports;
     //check that the solution has the correct format
     if(sol.size>m){
       english="The solution should consist of at most k ("+m+") elements, but it contains "+sol.size+", elements.";
       stop;
     }
     for(i=0;i<k;i++){
       if(sol[i].i<0 or sol[i].i>=n or sol[i].j<0 or sol[i].j>=n){
	 english="The element "+i+" of the solution is (i="+sol[i].i+", "+sol[i].j+"), which is not a valid cell. Cells range from (0, 0) to (n-1, n-1), and n = "+n+".";
	 stop;
       }
     }
     //check that path is continuous
     for(i=0;i<k-1;i++){
       mh=abs(sol[i].i-sol[i+1].i);
       mv=abs(sol[i].j-sol[i+1].j);
       if(not ((mh==1 and mv==0) or (mh==0 and mv==1) or (sol[i+1].i==inp.s.i and sol[i+1].j==inp.s.j))){
	 found=0;
	 for t in tps{
	   if(t.source.i==sol[i].i and t.source.j==sol[i].j and t.target.i==sol[i+1].i and t.target.j==sol[i+1].j)
	     found=1;
	 }
	 if(found==0){
	   english="The step "+(i+1)+" from ("+sol[i].i+", "+sol[i].j+") to ("+sol[i+1].i+", "+sol[i+1].j+") is not valid because the cells are not adjacent, and there is no teleport.";
	   stop;
	 }
       }
     }
     //check no tps repeated
     for t in tps{
       mh=abs(t.source.i-t.target.i);
       mv=abs(t.source.j-t.target.j);
       if(not ((mh==1 and mv==0) or (mh==0 and mv==1) or (t.target.i==inp.s.i and t.target.j==inp.s.j))){
	 count=0;
	 for(i=0;i<k-1;i++)
	   if(t.source.i==sol[i].i and t.source.j==sol[i].j and t.target.i==sol[i+1].i and t.target.j==sol[i+1].j)
	     count++;
	 if(count>1){
	   english="The teleport ("+t.source.i+", "+t.source.j+") -> ("+t.target.i+", "+t.target.j+") is used "+count+" times.";
	   stop;
	 }
       }
     }
     //check that path doesn't walk into walls
     for(i=0;i<k;i++)if(grid[sol[i].i][sol[i].j]==1){
	 english="The path includes the cell ("+sol[i].i+", "+sol[i].j+") in the position "+i+", which is a wall.";
	 stop;
       }
     //check that the path starts at s
     if(sol[0].i!=inp.s.i or sol[0].j!=inp.s.j){
       english="The first cell of the solution is ("+sol[0].i+", "+sol[0].j+"), which is not s (s = ("+inp.s.i+", "+inp.s.j+")).";
       stop;
     } 
     //check that path sees every cell
     for(i=0;i<n;i++)for(j=0;j<n;j++)if(grid[i][j]==0){
	   found=0;
	   for(h=0;h<k;h++)if(
			      (sol[h].i==i and sol[h].j==j-1) or
			      (sol[h].i==i and sol[h].j==j) or
			      (sol[h].i==i and sol[h].j==j+1) or
			      (sol[h].i==i-1 and sol[h].j==j-1) or
			      (sol[h].i==i-1 and sol[h].j==j) or
			      (sol[h].i==i-1 and sol[h].j==j+1) or
			      (sol[h].i==i+1 and sol[h].j==j-1) or
			      (sol[h].i==i+1 and sol[h].j==j) or
			      (sol[h].i==i+1 and sol[h].j==j+1)
			      ) found=1;
	   if(found==0){
	     english="The path does not include the cell ("+i+", "+j+"), which is walkable.";
	     stop;
	   }
	 }

     valid=1;
     english="And it is correct.";
}
