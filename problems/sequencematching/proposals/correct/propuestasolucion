reduction
{
  // top left coordinate is start of the path
  "{0}{0}at{0}th";
  // map each coordinate to a position in the path (it will be bijective by
  // the previous clause and by how the path is guaranteed to be connex)
  for (i = 0 ; i < n ; ++i)
    for (j = 0 ; j < n ; ++j) {
      exactly 1 {
        for (p = 0 ; p < n * n ; ++p)
          "{i}{j}at{p}th";
      };
    }
  // the path matches the sequence
  for (p = 0 ; p < n*n ; ++p)
    for (i = 0 ; i < n ; ++i)
      for (j = 0 ; j < n ; ++j)
        if (S[p] != M[i][j])
          not "{i}{j}at{p}th";
  // the path is connex
  for (p = 0 ; p < n * n - 1 ; ++p)
    for (i = 0 ; i < n ; ++i)
      for (j = 0 ; j < n ; ++j) {
        "{i}{j}at{p}th" implies or {
          if (i) "{i-1}{j}at{p+1}th";
          if (i < n - 1) "{i+1}{j}at{p+1}th";
          if (j) "{i}{j-1}at{p+1}th";
          if (j < n - 1) "{i}{j+1}at{p+1}th";
        };
      }
}

reconstruction
{
  for (i = 0 ; i < n ; ++i)
    for (j = 0 ; j < n ; ++j)
      for (p = 0 ; p < n * n ; ++p)
        if ("{i}{j}at{p}th")
          step[i][j] = p;
}