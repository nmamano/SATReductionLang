reduction
{
  // each position occupied by at most one shape
  for (r = 0 ; r < n ; ++r)
    for (c = 0 ; c < m ; ++c)
      atmost 1 {
        for (i = 0 ; i < shapes.size ; ++i)"{r}{c}has{i}th";
      };
  // each shape occupies 4 positions
  for (i = 0 ; i < shapes.size ; ++i) {
    exactly 4 {
      for (r = 0 ; r < n ; ++r)
        for (c = 0 ; c < m ; ++c)"{r}{c}has{i}th";
    };
  }
  // each shape is directly supported by the ground or a previous shape
  for (i = 0 ; i < shapes.size ; ++i) {
    or{
      for (r = 0 ; r < n ; ++r)
        for (c = 0 ; c < m ; ++c)
          if (r == n - 1)"{r}{c}has{i}th";
          else if (i > 0) "{r}{c}has{i}th" and or {
            for (j = 0 ; j < i ; ++j) "{r+1}{c}has{j}th";
          };
    };
  }
  // each shape is not directly supported by a subsequent shape
  // (the implied {r+1}{c}has{i}th is redundant, but helps minisat)
  for (i = 0 ; i < shapes.size - 1 ; ++i)
    for (r = 0 ; r < n - 1 ; ++r)
      for (c = 0 ; c < m ; ++c)
        "{r}{c}has{i}th" implies "{r+1}{c}has{i}th" or and {
          for (j = i + 1 ; j < shapes.size ; ++j)not "{r+1}{c}has{j}th";
        };
  // proper and connex form for each of the shapes; rotation bitmasks:
  //   4096  (8192) (16384) (32768)
  //   256   512    (1024)  (2048)
  //   16    32     64      (128)
  //   1     2      4       8
  for i, s in shapes {
    rot0 = 0; rot1 = 0; rot2 = 0; rot3 = 0;
    w0 = 0;   w1 = 0;   w2 = 0;   w3 = 0;
    h0 = 0;   h1 = 0;   h2 = 0;   h3 = 0;
    if (s == 1) {
      rot0 = 1 + 2 + 4 + 8;    rot1 = 1 + 16 + 256 + 4096;
      w0 = 4; h0 = 1;      w1 = 1; h1 = 4;
    } else if (s == 2) {
      rot0 = 1 + 2 + 4 + 32;   rot1 = 2 + 16 + 32 + 512;   rot2 = 2 + 16 + 32 + 64; rot3 = 1 + 16 + 32 + 256;
      w0 = 3; h0 = 2;       w1 = 2; h1 = 3;          w2 = 3; h2 = 2;       w3 = 2; h3 = 3;
    } else if (s == 3) {
      rot0 = 1 + 2 + 4 + 64;   rot1 = 2 + 32 + 256 + 512;  rot2 = 1 + 16 + 32 + 64; rot3 = 1 + 2 + 16 + 256;
      w0 = 3; h0 = 2;       w1 = 2; h1 = 3;          w2 = 3; h2 = 2;       w3 = 2; h3 = 3;
    } else if (s == 4) {
      rot0 = 4 + 16 + 32 + 64; rot1 = 1 + 16 + 256 + 512;  rot2 = 1 + 2 + 4 + 16;   rot3 = 1 + 2 + 32 + 512;
      w0 = 3; h0 = 2;       w1 = 2; h1 = 3;          w2 = 3; h2 = 2;       w3 = 2; h3 = 3;
    } else if (s == 5) {
      rot0 = 1 + 2 + 32 + 64;  rot1 = 2 + 16 + 32 + 256;
      w0 = 3; h0 = 2;       w1 = 2; h1 = 3;
    } else if (s == 6) {
      rot0 = 2 + 4 + 16 + 32;  rot1 = 1 + 16 + 32 + 512;
      w0 = 3; h0 = 2;       w1 = 2; h1 = 3;
    } else if (s == 7) {
      rot0 = 1 + 2 + 16 + 32;
      w0 = 2; h0 = 2;
    }
    exactly 1 {
      for (irot = 0 ; irot < 4 ; ++irot) {
        if (irot == 0) {
          rot = rot0; w = w0; h = h0;
        } else if (irot == 1) {
          rot = rot1; w = w1; h = h1;
        } else if (irot == 2) {
          rot = rot2; w = w2; h = h2;
        } else if (irot == 3) {
          rot = rot3; w = w3; h = h3;
        }
        if (rot != 0)
          for (r = 0 ; r < n ; ++r)
            for (c = 0 ; c < m ; ++c)
              if (not (r + h > n or c + w > m))
                and {
                  bits = rot;
                  for (rr = 0 ; rr<4 and bits>0 ; ++rr)
                    for (cc = 0 ; cc<4 and bits>0 ; ++cc) {
                      if ((bits % 2) == 1)
                        "{r+rr}{c+cc}has{i}th";
                      bits = bits / 2;
                    }
                };
      }
    };
  }
}